{"version":3,"sources":["../src/getOptions.js"],"names":["loaderUtils","require","cloneDeep","createWebpackLessPlugin","getOptions","loaderContext","options","plugins","relativeUrls","compress","Boolean","minimize","filename","resource","push","module","exports"],"mappings":"AAAA,IAAMA,cAAcC,QAAQ,cAAR,CAApB;AACA,IAAMC,YAAYD,QAAQ,YAAR,CAAlB;AACA,IAAME,0BAA0BF,QAAQ,2BAAR,CAAhC;;AAEA;;;;;AAKA,SAASG,UAAT,CAAoBC,aAApB,EAAmC;AACjC,MAAMC;AACJC,aAAS,EADL;AAEJC,kBAAc,IAFV;AAGJC,cAAUC,QAAQL,cAAcM,QAAtB;AAHN,KAIDT,UAAUF,YAAYI,UAAZ,CAAuBC,aAAvB,CAAV,CAJC,CAAN;;AAOA;AACAC,UAAQM,QAAR,GAAmBP,cAAcQ,QAAjC;;AAEA;AACA,MAAI,WAAWP,OAAX,KAAuB,KAA3B,EAAkC;AAChC;AACAA,YAAQC,OAAR,CAAgBO,IAAhB,CAAqBX,wBAAwBE,aAAxB,CAArB;AACD;;AAED,SAAOC,OAAP;AACD;;AAEDS,OAAOC,OAAP,GAAiBZ,UAAjB","file":"getOptions.js","sourcesContent":["const loaderUtils = require('loader-utils');\nconst cloneDeep = require('clone-deep');\nconst createWebpackLessPlugin = require('./createWebpackLessPlugin');\n\n/**\n * Retrieves the options from the loaderContext, makes a deep copy of it and normalizes it for further consumption.\n *\n * @param {LoaderContext} loaderContext\n */\nfunction getOptions(loaderContext) {\n  const options = {\n    plugins: [],\n    relativeUrls: true,\n    compress: Boolean(loaderContext.minimize),\n    ...cloneDeep(loaderUtils.getOptions(loaderContext)),\n  };\n\n  // We need to set the filename because otherwise our WebpackFileManager will receive an undefined path for the entry\n  options.filename = loaderContext.resource;\n\n  // When no paths are given, we use the webpack resolver\n  if ('paths' in options === false) {\n    // It's safe to mutate the array now because it has already been cloned\n    options.plugins.push(createWebpackLessPlugin(loaderContext));\n  }\n\n  return options;\n}\n\nmodule.exports = getOptions;\n"]}